#include <iostream>
#include <vector>

using namespace std;

vector<vector<int>> matrixAddition(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int rows = A.size();
    int cols = A[0].size();
    
    vector<vector<int>> result(rows, vector<int>(cols, 0));
    
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result[i][j] = A[i][j] + B[i][j];
        }
    }
    
    return result;
}

vector<vector<int>> matrixMultiplication(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int rows_A = A.size();
    int cols_A = A[0].size();
    int cols_B = B[0].size();
    
    vector<vector<int>> result(rows_A, vector<int>(cols_B, 0));
    
    for (int i = 0; i < rows_A; ++i) {
        for (int j = 0; j < cols_B; ++j) {
            for (int k = 0; k < cols_A; ++k) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }
    
    return result;
}

void displayMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {
        for (int element : row) {
            cout << element << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> matrix1 = { {1, 2, 3},
                                     {4, 5, 6},
                                     {7, 8, 9} };
                                     
    vector<vector<int>> matrix2 = { {9, 8, 7},
                                     {6, 5, 4},
                                     {3, 2, 1} };
    
    cout << "Matrix 1:" << endl;
    displayMatrix(matrix1);
    cout << endl;
    
    cout << "Matrix 2:" << endl;
    displayMatrix(matrix2);
    cout << endl;
    
    vector<vector<int>> additionResult = matrixAddition(matrix1, matrix2);
    cout << "Matrix Addition:" << endl;
    displayMatrix(additionResult);
    cout << endl;
    
    vector<vector<int>> multiplicationResult = matrixMultiplication(matrix1, matrix2);
    cout << "Matrix Multiplication:" << endl;
    displayMatrix(multiplicationResult);
    
    return 0;
}
